#!/bin/bash

built() {
    docker image ls --format '{{.ID}}:{{.Repository}}' | grep ":$1" | cut -d: -f1
}

built_timestamp() {
    id="$1"
    iso=$(docker inspect --format '{{.Created}}' "$id")
    trunc=$(echo $iso | cut -d. -f1)
    date -j -f "%Y-%m-%dT%H:%M:%S" "$trunc" "+%s"
}

modification_timestamp() {
    stat -f "%m" "$1"
}


dir="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)"

if uname -m | grep -q arm
then
    platform=linux/arm64
else
    platform=linux/amd64
fi

extension="$(basename "${BASH_SOURCE[0]}")"
tag=$(basename "${BASH_SOURCE[0]}" | tr '[:upper:]' '[:lower:]')
tag="${tag// /_}"
dockerfile="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)/Dockerfile.$extension"

build=false

# build if first arg to this command is --build
if [ $# -gt 0 -a "$1" = "--build" ]
then
    shift
    build=true
fi

# build if this $tag has never been built
id="$(built "$tag")"
if [ "$id" = "" ]
then
    echo "building $dockerfile"
    build=true
fi

# build if dockerfile has been modified since last build
if [ $build != "true" ]
then
  built_time="$(built_timestamp "$tag")"
  modification_time="$(modification_timestamp "$dockerfile")"

  if [ $built_time -lt $modification_time ]
  then
      echo "rebuilding because $dockerfile changed since last build."
      build=true
  fi
fi

if [ $build = true ]
then
    if ! docker build --platform $platform --tag "$tag" --file "$dockerfile" "$dir"
    then
	echo "Build failed."
	exit 1
    fi
fi


CONTAINER_USER=node
CONTAINER_HOME=/home/$CONTAINER_USER

mkdir -p "$HOME/.config"
mkdir -p "$HOME/.gnupg"
mkdir -p "$HOME/.ssh"


# work with repo in container
if ! git config --global --get-all safe.directory | grep -q "^/repo$"
then
  git config --global --add safe.directory /repo
fi

# get the repo base directory
REPO="$(cd "$(git rev-parse --show-toplevel)" && pwd)"

# find the working directory relative to the repo directory
WORK="$(pwd)"
if [ "$REPO" != "$WORK" ]
then
    WORK="${WORK#$REPO/}"
else
    WORK="."
fi

docker run --platform $platform -u 1000:1000 -v "$HOME/.config:$CONTAINER_HOME/.config" -v "$HOME/.gitconfig:$CONTAINER_HOME/.gitconfig" -v "$HOME/.ssh:$CONTAINER_HOME/.ssh" -v "$HOME/.gnupg:$CONTAINER_HOME/.gnupg" -v "$REPO:/repo" -w "/repo/$WORK" --rm -it "$tag" "$@"
